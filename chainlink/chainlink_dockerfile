# Use Ubuntu 20.04 LTS
FROM ubuntu:20.04

# Silence PostgreSQL installer
ARG DEBIAN_FRONTEND=noninteractive

# Update the distribution to the latest patches and install some essentials
RUN apt-get update && apt-get install -y \
  build-essential

RUN apt-get update && apt-get install -y \
  xz-utils \
  build-essential \
  wget \
  curl \
  gnupg \
  git \
  vim

# Add nodesource to the available sources
RUN curl -fsSL https://deb.nodesource.com/setup_12.x | bash -

# The actual installation
RUN apt-get install -y nodejs

# Install Go
RUN wget -c https://golang.org/dl/go1.17.linux-amd64.tar.gz -O - | tar -xz -C /usr/local
env PATH=$PATH:/usr/local/go/bin

# Install Yarn
RUN npm install -g yarn

# Add the PostgreSQL PGP key to verify their Debian packages.
# It should be the same key as https://www.postgresql.org/media/keys/ACCC4CF8.asc
# RUN apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8
RUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8

# Add PostgreSQL's repository. It contains the most recent stable release
#  of PostgreSQL.
RUN echo "deb http://apt.postgresql.org/pub/repos/apt/ focal-pgdg main" > /etc/apt/sources.list.d/pgdg.list

# Install ``python-software-properties``, ``software-properties-common`` and PostgreSQL 9.6
#  There are some warnings (in red) that show up during the build. You can hide
#  them by prefixing each apt-get statement with DEBIAN_FRONTEND=noninteractive
# RUN apt-get update && apt-get install -y python-software-properties software-properties-common postgresql-11 postgresql-client-11 postgresql-contrib-11
RUN apt-get update && apt-get install -y software-properties-common postgresql-11 postgresql-client-11 postgresql-contrib-11

# Note: The official Debian and Ubuntu images automatically ``apt-get clean``
# after each ``apt-get``

# Run the rest of the commands as the ``postgres`` user created by the ``postgres-11`` package when it was ``apt-get installed``
USER postgres

# Create a PostgreSQL role named ``docker`` with ``docker`` as the password and
# then create a database `docker` owned by the ``docker`` role.
# Note: here we use ``&&\`` to run commands one after the other - the ``\``
#       allows the RUN command to span multiple lines.
#RUN    /etc/init.d/postgresql start &&\
#    psql --command "CREATE USER chainlink WITH SUPERUSER PASSWORD 'crum-chum-hum';" &&\
#    createdb -O chainlink chainlink

RUN service postgresql start && \
    psql --command "CREATE USER chainlink WITH SUPERUSER PASSWORD 'crum-chum-hum';" &&\
    createdb -O chainlink chainlink

# Adjust PostgreSQL configuration so that remote connections to the
# database are possible.
RUN echo "host all  all    0.0.0.0/0  md5" >> /etc/postgresql/11/main/pg_hba.conf

# And add ``listen_addresses`` to ``/etc/postgresql/11/main/postgresql.conf``
RUN echo "listen_addresses='*'" >> /etc/postgresql/11/main/postgresql.conf

# Add VOLUMEs to allow backup of config, logs and databases
VOLUME  ["/etc/postgresql", "/var/log/postgresql", "/var/lib/postgresql"]

# Run as root
USER root

# Expose the PostgreSQL port
EXPOSE 5432

# create API email and password files
RUN mkdir /cla
RUN echo "admin@example.com" > /cla/.api
RUN echo "password" >> /cla/.api
RUN echo "Crum-Chum-Hum-2000" > /cla/.password

# RUN echo "cp /cla/.api /chainlink && cp /cla/.password /chainlink" > /cla/setup.sh
# RUN chmod +x /cla/setup.sh

# Start from a Bash promt
ENTRYPOINT service postgresql start && bash
# CMD service postgresql start && [ "/bin/bash" ]
# CMD [ "/bin/bash" ]
